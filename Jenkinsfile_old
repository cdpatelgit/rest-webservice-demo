#!/usr/bin/env groovy

properties([[$class: 'ParametersDefinitionProperty', parameterDefinitions: [
        [$class: 'hudson.model.StringParameterDefinition', name: 'PHASE', defaultValue: "BUILD_DEPLOY"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'TARGET_ENV', defaultValue: "dev"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'K8S_CLUSTER_URL', defaultValue: "https://mtn21-circuit-k8s-rhel-master.mt.att.com"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'K8S_CONTEXT', defaultValue: "default"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'K8S_USERNAME', defaultValue: "root"],
        [$class: 'hudson.model.PasswordParameterDefinition', name: 'K8S_PASSWORD'],
        [$class: 'hudson.model.PasswordParameterDefinition', name: 'K8S_TOKEN',defaultValue: "m01992@crome.att.com:enc:qkctlFEIkIS3isdpc6CJTuc3"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'K8S_NAME', defaultValue: "DEV"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'K8S_PODS_REPLICAS', defaultValue: "1"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'K8S_SERVICE_ACCOUNT', defaultValue: "default"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'RESOURCES_LIMITS_CPU', defaultValue: "1000m"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'RESOURCES_LIMITS_MEMORY', defaultValue: "3Gi"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'RESOURCES_REQUESTS_CPU', defaultValue: "500m"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'RESOURCES_REQUESTS_MEMORY', defaultValue: "2Gi"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'SONAR_BREAKER_SKIP',defaultValue: "True"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'SONAR_BREAKER_QRY_INTERVAL',defaultValue: "7000"],
        [$class: 'hudson.model.StringParameterDefinition', name: 'SONAR_BREAKER_QRY_MAXATTEMPTS',defaultValue: "100"],
]]])


echo "Build branch: ${env.BRANCH_NAME}"

node("docker") {

	def branchName = (env.BRANCH_NAME ?: "master").replaceAll(/[^0-9a-zA-Z_]/, "-")
	stage 'Checkout'
	checkout scm
	pom = readMavenPom file: 'pom.xml'
	PROJECT_NAME = pom.artifactId;
	APPLICATION_NAME = pom.artifactId;
	VERSION = pom.version;
	LABEL_VERSION = pom.version.replaceAll(".", "-");
	echo "LabelVerion: " + LABEL_VERSION
	NAMESPACE = pom.properties['namespace']
	KUBE_NAMESPACE = pom.properties['kube.namespace']


	if (branchName != 'master') {
		KUBE_NAMESPACE = "${KUBE_NAMESPACE}-${TARGET_ENV}"
	}


	IMAGE_NAME = pom.properties['docker.registry'] + "/" + NAMESPACE + "/" + "${APPLICATION_NAME}"
	echo "Artifact: " + PROJECT_NAME
	env.DOCKER_HOST = "tcp://localhost:4243"
	env.DOCKER_CONFIG = "${WORKSPACE}/.docker"

	withEnv(["PATH=${env.PATH}:${tool 'M3'}/bin:${tool 'jdk1.8'}/bin", "JAVA_HOME=${tool 'jdk1.8'}", "MAVEN_HOME=${tool 'M3'}"]) {

		echo "JAVA_HOME=${env.JAVA_HOME}"
		echo "MAVEN_HOME=${env.MAVEN_HOME}"
		echo "PATH=${env.PATH}"
		echo "APPLICATION_NAME=${APPLICATION_NAME}"

		wrap([$class: 'ConfigFileBuildWrapper', managedFiles: [
				[fileId: 'maven-settings.xml', variable: 'MAVEN_SETTINGS'],
				[fileId: 'sonar-secret.txt', variable: 'SONAR_SECRET'],
				[fileId: 'sonar.properties', variable: 'SONAR_PROPERTIES']
		]]) {

			if ("${PHASE}" == "BUILD" || "${PHASE}" == "BUILD_DEPLOY") {
				stage 'Compile'
				sh 'mvn -DskipTests -Dmaven.test.skip=true -s $MAVEN_SETTINGS -Ddummy.prop=$SONAR_PROPERTIES clean compile'

				stage 'Unit Test'
				sh 'mvn -s $MAVEN_SETTINGS test'

				stage 'Package'
				sh 'mvn -DskipTests -Dmaven.test.skip=true -s $MAVEN_SETTINGS package'

				stage ('Quality Scan and QG1')
				{
					def props = readProperties file: "${env.SONAR_PROPERTIES}"
					sh 'mvn help:effective-settings help:system help:effective-pom  ' +
							' -Dsonar.host.url=' +      props['sonar.host.url'] +
							' -Dsonar.att.motsid=' +    props['sonar.att.motsid'] +
							' -Dsonar.projectKey=' +    props['sonar.att.motsid'] + ':' + PROJECT_NAME +
							' -Dsonar.projectName=' +   props['sonar.att.motsid'] + ':' + PROJECT_NAME +
							' -Dsonar.projectDescription=' +    props['sonar.att.motsid'] + ':' + PROJECT_NAME +
							' -Dsonar.login=' +                 props['sonar.login'] +
							' -Dsonar.password=' +              props['sonar.password'] +
							' -Dsonar.att.view.type=' +         props['sonar.att.view.type'] +
							' -Dsonar.att.dependencycheck.tattletale.java.command=' +               props['sonar.att.dependencycheck.tattletale.java.command'] +
							' -Dsonar.att.dependencycheck.tattletale.sourceDirectory.path=' +       props['sonar.att.dependencycheck.tattletale.sourceDirectory.path'] +
							' -Dsonar.att.dependencycheck.tattletale.destinationDirectory.path=' +  props['sonar.att.dependencycheck.tattletale.destinationDirectory.path'] +
							' -Dsonar.att.tattletale.base.folder=' +                                props['sonar.att.tattletale.base.folder'] +
							' -Dsonar.att.tattletale.binaries.folder=' +                            props['sonar.att.tattletale.binaries.folder'] +
							' -Dsonar.att.tattletale.enabled=' +                                    props['sonar.att.tattletale.enabled']+
							' -Dsonar.buildbreaker.skip=${SONAR_BREAKER_SKIP} -s $MAVEN_SETTINGS sonar:sonar'
				}
			}

			dir('application')
			{
				if ("${PHASE}" == "BUILD_DEPLOY") {

					stage 'Publish Artifact'
//					echo "Publishing image for CROME"
//					sh 'mvn -X -DskipTests ' +
//							'-Dmaven.test.skip=true ' +
//							'-Dhttps.protocols="TLSv1" ' +
//							'-Djavax.net.ssl.trustStore="/opt/app/aft/aftswmnode/etc/cacerts.jks" ' +
//							'-Djavax.net.ssl.trustStorePassword="f22723cffdbd2fff1cb3c558677a7684" ' +
//							'-Djavax.net.ssl.keyStore="/opt/app/aft/aftswmnode/etc/cacerts.jks" ' +
//							'-Djavax.net.ssl.keyStorePassword="f22723cffdbd2fff1cb3c558677a7684" -s $MAVEN_SETTINGS ' +
//							'-U docker:build -Pimage-deploy-crome docker:push'

					echo "Publishing image for K8s"
					sh 'mvn -X -DskipTests ' +
							'-Dmaven.test.skip=true ' +
							'-Dhttps.protocols="TLSv1" ' +
							'-Djavax.net.ssl.trustStore="/opt/app/aft/aftswmnode/etc/cacerts.jks" ' +
							'-Djavax.net.ssl.trustStorePassword="f22723cffdbd2fff1cb3c558677a7684" ' +
							'-Djavax.net.ssl.keyStore="/opt/app/aft/aftswmnode/etc/cacerts.jks" ' +
							'-Djavax.net.ssl.keyStorePassword="f22723cffdbd2fff1cb3c558677a7684" -s $MAVEN_SETTINGS ' +
							'-U docker:build -Pimage-deploy-k8s docker:push'

					if ("${K8S_TOKEN}" != "" ) {
						KUBECTL_OPTS = "--server=${K8S_CLUSTER_URL} --insecure-skip-tls-verify=true --token=${K8S_TOKEN}"
					} else {
						KUBECTL_OPTS = "--server=${K8S_CLUSTER_URL} --insecure-skip-tls-verify=true --password=${K8S_PASSWORD} --username=${K8S_USERNAME}"
					}
					stage('Deploy to Environment') {
						withEnv([
								"APP_NAME=${APPLICATION_NAME}",
								"K8S_CTX=${K8S_CONTEXT}",
								"APP_NS=${KUBE_NAMESPACE}",
								"TARGET_ENV=${TARGET_ENV}",
								"VERSION=${VERSION}",
								"LABEL_VERSION=${LABEL_VERSION}",
								"REPLICA_COUNT=${K8S_PODS_REPLICAS}",
								"IMAGE_NAME=${IMAGE_NAME}-k8s:${VERSION}",
								"SERVICE_ACCOUNT=${K8S_SERVICE_ACCOUNT}",
								"KUBECTL=/opt/app/kubernetes/v1.5.2/bin/kubectl",
								"RESOURCES_LIMITS_CPU=${RESOURCES_LIMITS_CPU}",
								"RESOURCES_LIMITS_MEMORY=${RESOURCES_LIMITS_MEMORY}",
								"RESOURCES_REQUESTS_CPU=${RESOURCES_REQUESTS_CPU}",
								"RESOURCES_REQUESTS_MEMORY=${RESOURCES_REQUESTS_MEMORY}",
								"KUBECTL_OPTS=${KUBECTL_OPTS}"
						]) {
							sh "chmod 777 ./k8s/deploy.sh"
							sh "./k8s/deploy.sh"
						}
					}
				}
			}
		}
	}
}